#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int C = 0;
int M = 0;
clock_t time1, time2;
struct data
   {
       float result;
       int time;
   } *dat = NULL;
struct data* tmpdat = NULL;

struct Node
{
    struct data value;
    struct Node *left;
    struct Node *right;
    };

struct data* key_enter(int );
struct data* random_enter(int);
struct data* copyArr (struct data* , int );
void bubble_sort(struct data*, int);
void quick_sort(struct data*, int, int);
void insertion_sort(struct data*, int);
struct Node* createNode(struct data );
struct Node* createTree(struct Node *, struct data);
void printTtree(struct Node *root);
int Tree_search(struct Node *, int );
struct Node* binarytree_sort (struct data* , int );
int Linear_search (struct data* , int , int );
int Interpolation_search (struct data* ,int , int , int );
int Binary_search( struct data* , int , int );
void printArr(struct data*, int);



int main()
{
    int choice;
    int key;
    int keyindex;
    int i = 0;
    int size;
    char s[100];
    FILE *pf;


    printf("To read from file enter 1\nTo enter from the keyboard enter 2\nTo work with a random array enter 3\n");
    scanf("%d", &choice);
    switch(choice)
    {
        case 1:
            pf = fopen("C:\\\\laba1_1.csv","r");
            if (pf == NULL)
            {
                while (pf == NULL)
                {
                printf("Enter a file path:\n");
                scanf("%s", s);
                pf = fopen(s, "r");
                }
            }
             dat=(struct data*) malloc (sizeof(struct data));
             while (fscanf (pf, "%f%*c%d", &(dat[i].result), &(dat[i].time))!= EOF)
            {
                i++;
                dat = (struct data*) realloc (dat,(i+1)*sizeof(struct data));
            }
            size = i-1;
            size = size;
            fclose(pf);
            break;

        case 2:
            printf("\nEnter the number of values:");
            scanf("%d", &size);
            dat = key_enter(size);
            break;

        case 3:
            printf("\nEnter the number of values:");
            scanf("%d", &size);
            srand(time(NULL));
            dat = random_enter(size);
            break;

        default:
            printf("Error\n");
            return 1;
    }

    printf("\n\nTo search element(time value) in unsorted array enter 1\nEnter any other key to continue\n");
    scanf("%d", &choice);
    if (choice == 1)
    {
        printf("\nEnter element(time value) to find:");
        scanf("\n%d", &key);
        C = 0; M = 0;
        time1 = clock();
        keyindex = Linear_search(dat, size, key);
        time2 = clock();
        double  time = (double)(time2 - time1) /CLOCKS_PER_SEC;
        printf("Time:%0.8lf sec\t \nComparisons:%d\nMove operations:%d\n", time, C, M);
    }


    printf("\n\n\tBubble sort");
    tmpdat = copyArr(dat, size);
    time1 = clock();
    bubble_sort(tmpdat, size);
    time2 = clock();
    double time = (double)(time2 - time1) /CLOCKS_PER_SEC;
    printf("\nTime:%0.8lf sec\t \nComparisons:%d\nMove operations:%d", time, C, M);

    M = 0;
    C = 0;
    printf("\n\n\tQuick sort");
    tmpdat = copyArr(dat, size);
    time1 = clock();
    quick_sort(tmpdat, 0, size-1);
    time2 = clock();
    time = (double)(time2 - time1) /CLOCKS_PER_SEC;
    printf("\nTime:%0.8lf sec\t \nComparisons:%d\nMove operations:%d", time, C, M);


    M = 0;
    C = 0;
    printf("\n\n\tBinary tree sort");
    struct Node* node;
    tmpdat = copyArr(dat, size);
    time1 = clock();
    node = binarytree_sort(tmpdat, size);
    time2 = clock();
    time = (double)(time2 - time1) /CLOCKS_PER_SEC;
    printf("\nTime:%0.8lf sec\t \nComparisons:%d\nMove operations:%d", time, C, M);

    M = 0;
    C = 0;
    printf("\n\n\tInsertion sort");
    tmpdat = copyArr(dat, size);
    time1 = clock();
    insertion_sort(tmpdat, size);
    time2 = clock();
    time = (double)(time2 - time1) /CLOCKS_PER_SEC;
    printf("\nTime:%0.8lf sec\t \nComparisons:%d\nMove operations:%d", time, C, M);

    printf("\n\nTo search element(time value) enter 1\nEnter any other key to continue\n");
    scanf("%d", &choice);
    if (choice == 1)
    {
        printf("\nEnter element(time value) to find:");
        scanf("\n%d", &key);

        printf("\n\n\tLinear search\n\n");
        C = 0; M = 0;
        time1 = clock();
        keyindex = Linear_search(tmpdat, size, key);
        time2 = clock();
        time = (double)(time2 - time1) /CLOCKS_PER_SEC;
        printf("Time:%0.8lf sec\t \nComparisons:%d\nMove operations:%d\n", time, C, M);


        printf("\n\n\tInterpolation search\n");
        C = 0; M = 0;
        time1 = clock();
        keyindex = Interpolation_search(tmpdat, key, 0, size-1);
        time2 = clock();
        time = (double)(time2 - time1) /CLOCKS_PER_SEC;
        printf("Time:%0.8lf sec\t \nComparisons:%d\nMove operations:%d\n", time, C, M);

        printf("\n\n\tBinary search\n");
        C = 0; M = 0;
        time1 = clock();
        keyindex = Binary_search( tmpdat, key, size);
        time2 = clock();
        time = (double)(time2 - time1) /CLOCKS_PER_SEC;
        printf("Time:%0.8lf sec\t \nComparisons:%d\nMove operations:%d", time, C, M);


        printf("\n\n\tTree search\n");
        C = 0; M = 0;
        time1 = clock();
        Tree_search( node, key);
        time2 = clock();
        time = (double)(time2 - time1) /CLOCKS_PER_SEC;
        printf("Time:%0.8lf sec\t \nComparisons:%d\nMove operations:%d", time, C, M);
    }

        printf("\n\nTo print array enter 1\nEnter any other key to end the program\n");
    scanf("%d", &choice);
    if (choice == 1)
        printArr(tmpdat, size);
    else return 0;

    return 0;
}


struct data* key_enter (int size)
{
    int i;
    struct data* dat;
    dat = (struct data*) malloc (sizeof(struct data)*size);
    for (i = 0; i < size; i++)
    {
        printf("\nEnter result %d:", i+1);
        scanf("%f", &dat[i].result);
        printf("\nEnter time %d:", i+1);
        scanf("%d", &dat[i].time);
    }
    return dat;
}

struct data* random_enter(int size)
{
    int i = 0;
    struct data* dat;
    dat = (struct data*) malloc (sizeof(struct data)*size);
    srand(time(NULL));
    for (i = 0; i < size; i++)
    {
        dat[i].result = (rand()%101)*0.01;
        dat[i].time = rand()%1000000;
    }
    return dat;
}

struct data* copyArr (struct data* dat, int size )
{
    struct data* datcopy;
    datcopy = (struct data*) malloc (sizeof(struct data)* size);
    int i = 0;
    for (i = 0; i < size; i++)
        datcopy [i] = dat [i];
    return datcopy;
}

void bubble_sort(struct data* dat, int size)
{
    int i;
    int sort = 0;
    do
    {
        sort = 0;
        for(i = 1; i < size; i++)
        {
            if(dat[i].time < dat[i-1].time)
            {
                struct data tmp;
                tmp = dat[i];
                dat[i] = dat[i-1];
                dat[i-1] = tmp;
                M++;
                sort = 1;
            }
            C++;
        }
    } while(sort != 0);
}

void quick_sort(struct data* dat, int left, int right)
{
    int i = left;
    int j = right;
    int elem = dat[(i + j) / 2].time;

    do
    {
        while (dat[i].time < elem)
        {
            i++;
            C++;
        }
        while (dat[j].time > elem)
        {
            j--;
            C++;
        }

        if(i <= j)
        {
            if (dat[i].time > dat[j].time)
            {
                    struct data tmp;
                    tmp = dat[i];
                    dat[i] = dat[j];
                    dat[j] = tmp;
                    C++;
                    M++;
            }
            i++;
            j--;
        }
    } while (i <= j);

    if (i < right)
        quick_sort(dat, i, right);
    if (left < j)
        quick_sort(dat, left, j);
}


void insertion_sort(struct data* dat, int size)
{
    int i, j;
    struct data tmp;
    for ( i = 1; i < size; i++)
    {
        tmp = dat[i];
        for (j = i-1; j >= 0;j--)
        {
            if (dat[j].time < tmp.time )
                break;
            dat[j+1] = dat[j];
            dat[j] = tmp;
            C++;
            M++;
        }
    }
}


struct Node* createNode(struct data val)
{
    struct Node* root = (struct Node*) malloc(sizeof(struct Node));
    root->left = root->right = NULL;
    root->value = val;
    return root;
}

struct Node* createTree(struct Node *root, struct data val)
{
    C++;
    if (root == NULL)
    {
        root = createNode(val);
        M++;
    }
    if (val.time < root->value.time )
    {
        if (root->left == NULL)
            root->left = createNode(val);
        else
            createTree(root->left, val);
    }
    if (val.time > root->value.time)
    {
        if (root->right == NULL)
            root->right = createNode(val);
        else
            createTree(root->right, val);
    }
    return root;
}


struct Node* binarytree_sort (struct data* dat, int size)
{
    int i = 0;
    struct Node *node = NULL;
    while (i < size)
    {
        node = createTree(node, dat[i]);
        M++;
        i++;
    }
    return node;
}

void printTree(struct Node *root)
{
    if (root != NULL)
    {
        printTree(root->left);
        printf("%0.10f\t %d \t\n", root->value.result, root->value.time);
        printTree(root->right);
    }
}

int Tree_search(struct Node *root, int key)
{
    C++;
    if (root == NULL)
    {
        printf("No such element(%d) in the array.\n", key);
        return -1;
    }
    if (key == root->value.time)
    {
        printf("Element(%d) is found\n", root->value.time);
        return root->value.time;
    }
    if (key < root->value.time)
        return Tree_search(root->left, key);
    if (key > root->value.time)
        return Tree_search(root->right, key);
}


int Linear_search (struct data* dat, int size, int key )
{
    int i;
    for (i = 0; i < size; i++)
    {
      if (dat[i].time == key)
      {
         printf("Element's(%d) number is %d.\n", key , i+1);
         break;
      }
      C++;
   }
   if (i == size)
      printf("No such element(%d) in the array.\n", key);
   return i;
}


int Interpolation_search (struct data* dat,int key, int left, int right)
{
    int mid = 0;
    while ((dat[left].time < key) && (key <dat[right].time))
    {
     mid = left + (key - dat[left].time) * (right - left) / (dat[right].time - dat[left].time);
     C++;
     if (dat[mid].time < key )
        left = mid + 1;
     else if (dat[mid].time > key)
        right = mid - 1;
     else
     {
         printf("\nElement's(%d) number is %d.\n", key , mid+1);
         return mid;
     }
    }
    if (dat[left].time == key)
    {
        printf("\nElement's(%d) number is %d.\n", key , left+1);
        return left;
    }
    else if (dat[right].time == key)
    {
        printf("\nElement's(%d) number is %d.\n", key , right+1);
        return right;
    }
    else
        printf("No such element(%d) in the array.\n", key);
}

int Binary_search( struct data* dat, int key, int size)
{
    int left = 0;
    int right = size - 1;
    int mid;
    while (left <= right)
    {
        mid = (left + right) / 2;
        if (key < dat[mid].time)
        {
           right = mid - 1;
           C++;
        }
        else if (key > dat[mid].time)
        {
            left = mid + 1;
            C++;
        }
        else
        {
            printf("\nElement's(%d) number is %d.\n", key , mid+1);
            return mid;
        }

    }
    printf("No such element(%d) in the array.\n", key);
}

void printArr (struct data* dat, int size)
{
    int i;
    printf("  Ascending sort :\t\t\t  Descending sort: \n");
    for(i = 0; i < (size); i++)
        printf("%0.10f\t %12d \t |\t%0.10f\t %d\n",dat[i].result, dat[i].time, dat[size-i-1].result, dat[size-i-1].time);
}
